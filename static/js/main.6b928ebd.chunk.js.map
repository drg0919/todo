{"version":3,"sources":["user.js","EditItem.js","TodoItem.js","AddTodo.js","useTodo.js","Todo.js","App.js","serviceWorker.js","index.js"],"names":["user","initial","arguments","length","undefined","_useState","useState","_useState2","Object","slicedToArray","state","setState","e","target","value","x","EditItem","props","react_default","a","createElement","components","style","margin","textTransform","transition","elevation","interactive","onSubmit","editList","width","large","onChange","setItem","placeholder","editedItem","type","role","alignText","rightIcon","intent","onClick","canceler","TodoItem","item","date","id","updater","complete","completer","completeDate","deleter","edit","setEdit","_useState3","_useState4","open","setOpen","_user","_user2","resetItem","st","col","preventDefault","inline","checked","display","textDecoration","color","icon","isOpen","confirmButtonText","canOutsideClickCancel","onClose","AddTodo","input","setInput","resetInput","adder","leftIcon","useTodo","todo","setTodo","addItem","i","Date","concat","toConsumableArray","uuid","getDate","getMonth","getFullYear","editItem","newItems","map","objectSpread","completeItem","comdate","y","delItem","idx","filter","Todo","initialList","JSON","parse","window","localStorage","getItem","emplist","setEmplist","_useTodo","useEffect","stringify","padding","assign","key","clear","App","className","backgroundColor","fixedToTop","align","iconSize","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6b928ebd.chunk.js","sourcesContent":["import {useState} from 'react';\r\nexport default (initial='') => {\r\n    const [state,setState] = useState(initial);\r\n    const update = (e) => {\r\n            setState(e.target.value);\r\n    };\r\n    const reset = (x) => {\r\n        setState(x);\r\n    };\r\n    return [state,update,reset];\r\n}","import React from 'react';\r\nimport {Button,InputGroup} from '@blueprintjs/core';\r\nimport {Card} from '@blueprintjs/core';\r\n\r\nexport default (props) => {\r\nreturn(\r\n    <Card\r\n     style={{margin: '1rem',textTransform: 'capitalize',transition: 'all 0.5s'}} \r\n     elevation={2} \r\n     interactive={false}\r\n    >\r\n    <form onSubmit={props.editList}>\r\n         <div style={{width: '30vw', margin: '0.5rem auto'}}><InputGroup\r\n             large={true}\r\n             onChange={props.setItem}\r\n             placeholder=\"Enter Updated Item\"\r\n             value={props.editedItem}/></div>\r\n         <Button \r\n         style={{margin: '0 0.5rem'}}\r\n         type=\"submit\" \r\n         role=\"button\" \r\n         alignText=\"left\" \r\n         rightIcon=\"saved\" \r\n         large={true} \r\n         intent=\"success\">Save</Button>\r\n         <Button \r\n         style={{margin: '0 0.5rem'}}\r\n         onClick={props.canceler}\r\n         role=\"button\" \r\n         alignText=\"left\" \r\n         rightIcon=\"cross\" \r\n         large={true} \r\n         intent=\"danger\">Cancel</Button>\r\n     </form>\r\n     </Card>\r\n     );}","import React,{useState} from 'react';\r\nimport {Button,Alert,Checkbox} from '@blueprintjs/core';\r\nimport {Card} from '@blueprintjs/core';\r\nimport user from './user';\r\nimport EditItem from './EditItem';\r\n\r\nexport default function TodoItem(props) {\r\n    const {item,date,id,updater,complete,completer,completeDate,deleter} = props;\r\n    const [edit,setEdit] = useState(false);\r\n    const [open,setOpen] = useState(false);\r\n    const [editedItem,setItem,resetItem] = user(item);\r\n    const editToList = (e) => {\r\n        e.preventDefault();\r\n        setEdit(false);\r\n        if(editedItem) {\r\n            updater(id,editedItem);\r\n            resetItem(item);\r\n        }\r\n        else {\r\n            setOpen(true);\r\n            setEdit(true);\r\n        }\r\n    }\r\n    const com = () => {\r\n        completer(id);\r\n    }\r\n    const deleteItem = () => {\r\n        deleter(id);\r\n    }\r\n    const canceler = () => {setEdit(false); resetItem(item);}\r\n    let x=null;\r\n    let st  = complete?'line-through':'none';\r\n    let col = complete? 'gray': 'black';\r\n    if(edit) {\r\n       x = (<EditItem editList={editToList} setItem={setItem} editedItem={editedItem} canceler={canceler} />);\r\n    }\r\n    else {\r\n            x=(<Card \r\n            style={{margin: '1rem',textTransform: 'capitalize',transition: 'all 0.5s'}} \r\n            elevation={2} \r\n            interactive={false}\r\n            >\r\n                <Checkbox\r\n                inline={true}\r\n                onChange={com}\r\n                checked={complete}\r\n                style={{display: 'inline'}}\r\n                >\r\n                <h2 style={{textDecoration: st,transition: 'all 0.5s',color: col,textTransform: 'capitalize'}}>{item}</h2>\r\n                </Checkbox>\r\n                <p><strong>Added on : {date}</strong></p>\r\n                <p><strong>Completed on : {complete?completeDate:'Not completed'}</strong></p>\r\n                <Button \r\n                style={{margin: '0 0.5rem'}}\r\n                role=\"button\" \r\n                alignText=\"center\" \r\n                icon=\"edit\" large={true} \r\n                intent=\"warning\" \r\n                onClick={() => setEdit(true)}>\r\n                Edit</Button>\r\n                <Button \r\n                style={{margin: '0 0.5rem'}}\r\n                role=\"button\" \r\n                alignText=\"center\" \r\n                icon=\"trash\" large={true} \r\n                intent=\"danger\"\r\n                onClick={deleteItem} \r\n                >\r\n                Delete</Button>\r\n            </Card>);}\r\n            return(\r\n                <div style={{margin: '0.5rem auto'}}>\r\n                    {x}\r\n                    <Alert isOpen={open} confirmButtonText=\"Okay\" icon=\"cross\" intent=\"danger\" canOutsideClickCancel={true} onClose={() => setOpen(false)}><p>Empty Item</p></Alert>\r\n                </div>\r\n                );\r\n}","import React,{useState} from 'react';\r\nimport {Button,Alert,InputGroup} from '@blueprintjs/core';\r\nimport \"normalize.css\";\r\nimport \"@blueprintjs/core/lib/css/blueprint.css\";\r\nimport \"@blueprintjs/icons/lib/css/blueprint-icons.css\";\r\nimport user from './user';\r\nexport default function AddTodo(props) {\r\n    const [input,setInput,resetInput] = user();\r\n    const [open,setOpen] = useState(false);\r\n    const {adder} = props;\r\n    const addToList = (e) => {\r\n        e.preventDefault();\r\n        if(input) {\r\n            adder(input);\r\n            resetInput('');\r\n        }\r\n        else {\r\n            setOpen(true);\r\n        }\r\n    }\r\n    return(\r\n            <form onSubmit={addToList}>\r\n                <div style={{width: '30vw', margin: '0.5rem auto'}} > <InputGroup\r\n                    large={true}\r\n                    leftIcon=\"add-to-artifact\"\r\n                    onChange={setInput}\r\n                    placeholder=\"Enter New Item\"\r\n                    value={input}\r\n                /></div>\r\n                <div><Button \r\n                type=\"submit\" \r\n                role=\"button\" \r\n                alignText=\"left\" \r\n                rightIcon=\"add\" \r\n                large={true} \r\n                intent=\"primary\">Submit</Button></div>\r\n                <Alert \r\n                isOpen={open} \r\n                confirmButtonText=\"Okay\" \r\n                icon=\"cross\" \r\n                intent=\"danger\" \r\n                canOutsideClickCancel={true} \r\n                onClose={() => setOpen(false)}><p>Empty Item</p></Alert>\r\n            </form>\r\n    );\r\n}","import {useState} from 'react';\r\nimport uuid from 'uuid/v4';\r\nexport default (initial) => {\r\nconst [todo,setTodo] = useState(initial);\r\nreturn ({\r\n    todo,\r\naddItem: (i) => {\r\n    var x = new Date();\r\n    setTodo([...todo,{id: uuid(), item:i,complete:false, date: `${x.getDate()}/${x.getMonth()+1}/${x.getFullYear()}`}])\r\n},\r\neditItem: (id,item) => {\r\n    var newItems = todo.map(e => {\r\n        if(e.id===id) {\r\n            var x = new Date();\r\n            return({...e,item: item,date: `${x.getDate()}/${x.getMonth()+1}/${x.getFullYear()}`,completeDate: ''});\r\n        }\r\n        else \r\n            return(e);\r\n    });\r\n    setTodo(newItems);\r\n},\r\ncompleteItem: (id) => {\r\n    var x = new Date();\r\n    var comdate = `${x.getDate()}/${x.getMonth()+1}/${x.getFullYear()}`;\r\n    var newItems = todo.map(e => {\r\n        if(e.id===id) {\r\n            let y=e.complete;\r\n            return({...e,complete: !y,completeDate: comdate});\r\n        }\r\n        else \r\n            return(e);\r\n    });\r\n    setTodo(newItems);\r\n},\r\ndelItem: (idx) => {\r\n    var newItems = todo.filter((i) => i.id!==idx)\r\n    setTodo(newItems);\r\n},\r\nsetTodo: setTodo\r\n});\r\n}","import React,{useEffect,useState} from 'react';\r\nimport {Button,Alert} from '@blueprintjs/core';\r\nimport \"normalize.css\";\r\nimport \"@blueprintjs/core/lib/css/blueprint.css\";\r\nimport \"@blueprintjs/icons/lib/css/blueprint-icons.css\";\r\nimport TodoItem from './TodoItem';\r\nimport AddTodo from './AddTodo';\r\nimport useTodo from './useTodo';\r\n\r\n\r\nexport default function Todo() {\r\n    const initialList = JSON.parse(window.localStorage.getItem(\"todos\")||\"[]\");\r\n    const [emplist,setEmplist] = useState(false);\r\n    const {todo,addItem,editItem,completeItem,delItem,setTodo} = useTodo(initialList);\r\n    useEffect(() => {\r\n            window.localStorage.setItem(\"todos\",JSON.stringify(todo));\r\n        }, [todo]);\r\n    const clearStorage = () => {\r\n        if(window.localStorage.getItem(\"todos\")!==\"[]\"){\r\n        window.localStorage.clear();\r\n        setTodo([]);}\r\n        else\r\n            setEmplist(true);\r\n    }\r\n\r\n    return(\r\n        <div style={{padding: '3rem'}}>\r\n     \r\n        {/* <Callout intent=\"danger\" icon={null}> */}\r\n            {todo.map(e => <TodoItem {...e} \r\n            updater={editItem} \r\n            completer={completeItem} \r\n            deleter={delItem} \r\n            key={e.id}/>)}\r\n            <AddTodo adder={addItem}/>\r\n            {/* </Callout> */}\r\n            <Button \r\n            style={{display: 'inline',margin: '0.5rem auto'}} \r\n            rightIcon=\"ban-circle\" onClick={clearStorage} \r\n            intent=\"danger\"\r\n            large={true}\r\n            >Delete the full list</Button>\r\n            <Alert \r\n                isOpen={emplist} \r\n                confirmButtonText=\"Okay\" \r\n                icon=\"stop\" \r\n                intent=\"danger\" \r\n                canOutsideClickCancel={true} \r\n                onClose={() => setEmplist(false)}><p>Empty List</p></Alert>\r\n        </div>\r\n     \r\n    );\r\n}","import React from 'react';\nimport {Navbar,NavbarGroup,NavbarHeading,Icon} from '@blueprintjs/core';\nimport Todo from './Todo';\nimport './App.css';\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Navbar style={{backgroundColor: 'green'}} fixedToTop={true}>\n        <NavbarGroup align=\"left\">\n          <Icon icon=\"clipboard\" color=\"white\" iconSize=\"20px\" style={{margin:'0 12px'}}/>\n          <NavbarHeading style={{color: 'white'}}><h2>Todo List</h2></NavbarHeading>\n        </NavbarGroup>\n      </Navbar>\n      <Todo />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}